version: "3.9"
services:
  # Pipelines
  etl_pipeline:
    build:
      context: ./etl_pipeline
      dockerfile: ./Dockerfile
    container_name: etl_pipeline
    image: etl_pipeline:latest
    volumes:
      - ./etl_pipeline:/opt/dagster/app
    env_file:
      - env
    networks:
      - de_network
  de_psql:
    hostname: de_psql
    image: postgres:15
    container_name: de_psql
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - env
    networks:
      - de_network
  # Dagster
  de_dagster:
    build:
      context: ./dagster/
    container_name: de_dagster
    image: de_dagster:latest
  de_dagster_dagit:
    image: de_dagster:latest
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml
    container_name: de_dagster_dagit
    expose:
      - "3001"
    ports:
      - "3001:3001"
    volumes: # Make docker client accessible so we can terminatecontainers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - de_network
  de_dagster_daemon:
    image: de_dagster:latest
    entrypoint:
      - dagster-daemon
      - run
    container_name: de_dagster_daemon
    volumes: # Make docker client accessible so we can launchcontainers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - de_network
  #minio
  minio:
    hostname: minio
    image: "minio/minio"
    container_name: minio
    ports:
    - "9001:9001"
    - "9000:9000"
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - ./minio:/data
    env_file:
      - env
    networks:
      - de_network

  #mysql
  de_mysql:
    hostname: de_mysql
    image: mysql:8.0
    container_name: de_mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - "3307:3306"
    env_file:
     - env
    networks:
      - de_network
#  ds_notebook:
#    image: ds_notebook:latest
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - 8888:8888
#    volumes:
#      - ./notebook:/home/jovyan/work
#  de_metabase:
#     image: metabase/metabase:latest
#     container_name: de_metabase
#     volumes:
#       - ./storage/metabase_data:/metabase_data
#     ports:
#       - "3030:3000"
#     env_file:
#       - env
#     networks:
#       - de_network

#  spark-master:
#      build:
#        context: ./spark
#        dockerfile: ./Dockerfile
#      container_name: "spark-master"
#      environment:
#        - SPARK_MODE=master
#        - SPARK_LOCAL_IP=spark-master
#        - SPARK_RPC_AUTHENTICATION_ENABLED=no
#        - SPARK_RPC_ENCRYPTION_ENABLED=no
#        - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#        - SPARK_SSL_ENABLED=no
#      ports:
#        - "7077:7077"
#        - "8080:8080"
#      volumes:
#        - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
#      networks:
#        - de_network
##
#
#  spark-worker:
#    image: docker.io/bitnami/spark:3.3
#    deploy:
#      replicas: 2
#    environment:
#      - SPARK_MODE=worker
#      - SPARK_MASTER_URL=spark://spark-master:7077
#      - SPARK_WORKER_MEMORY=2G
#      - SPARK_WORKER_CORES=1
#      - SPARK_RPC_AUTHENTICATION_ENABLED=no
#      - SPARK_RPC_ENCRYPTION_ENABLED=no
#      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#      - SPARK_SSL_ENABLED=no
#    networks:
#      - de_network
#
#  mc:
#    image: minio/mc
#    container_name: mc
#    hostname: mc
#    environment:
#      - AWS_ACCESS_KEY_ID=minio
#      - AWS_SECRET_ACCESS_KEY=minio123
#      - AWS_REGION=us-east-1
#    entrypoint: >
#      /bin/sh -c " until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done; /usr/bin/mc mb minio/warehouse; /usr/bin/mc policy set public minio/warehouse; exit 0; "
#    depends_on:
#      - minio
#    networks:
#      - de_network
networks:
  de_network:
    driver: bridge
    name: de_network
